services:

  llm:
      image: svercoutere/mu-python-ml:0.1.0
      environment:
        MODE: "development"
        MU_SPARQL_ENDPOINT: "http://triplestore:8890/sparql"
        MU_SPARQL_UPDATEPOINT: "http://triplestore:8890/sparql"
        MU_QUEUE_GRAPH: "http://mu.semte.ch/graphs/tasks"

        LLM_API_KEY: "ollama" # Default value of ollama
        LLM_ENDPOINT: "http://ollama:11434/v1/" # Can be from any provided that is compatible with the openai (deepinfra, azure, etc.)
        LLM_MODEL_NAME: "llama3.1:8b-instruct-q4_0" # Name of the model to use, can be any model the endpoint supports (ollama: you can pull more opensource model from ollama and run them as well locally)
        
      volumes:
      - ./llm:/app/

  ollama:
    image: svercoutere/mu-local-llm:latest
    environment:
      OLLAMA_MODEL: "llama3.1:8b-instruct-q4_0" #create the following based on the /models/<modelname>/<modelname>.modelfile


  identifier:
    image: semtech/mu-identifier:1.10.3
    environment:
      SESSION_COOKIE_SECURE: "on"
    links:
      - dispatcher:dispatcher
    restart: always
  dispatcher:
    image: semtech/mu-dispatcher:2.1.0-beta.2
    links:
      - resource:resource
    volumes:
      - ./config/dispatcher:/config
    restart: always
  virtuoso:
    image: redpencil/virtuoso:1.2.0-rc.1
    environment:
      SPARQL_UPDATE: "true"
      DEFAULT_GRAPH: "http://mu.semte.ch/application"
    volumes:
      - ./data/db:/data
      - ./config/virtuoso/virtuoso.ini:/data/virtuoso.ini
    restart: always
  resource:
    image: semtech/mu-cl-resources:1.20.0
    links:
      - database:database
    volumes:
      - ./config/resources:/config
    restart: always
  deltanotifier:
    image: semtech/mu-delta-notifier:0.3.0
    volumes:
      - ./config/delta:/config
    labels:
      - "logging=true"
    restart: always
  frontend:
    # Skip docker hub and just build it, it's a hackathon...
    build: ../frontend-ai-hackathon-group-4
    restart: always
  migrations:
    image: semtech/mu-migrations-service:0.6.0
    environment:
      MU_SPARQL_TIMEOUT: "300"
      MU_SPARQL_ENDPOINT: "http://virtuoso:8890/sparql"
    volumes:
      - ./config/migrations:/data/migrations
    labels:
      - "logging=true"
    restart: always
  database:
    image: semtech/sparql-parser:0.0.8
    environment:
      MU_SPARQL_ENDPOINT: "http://virtuoso:8890/sparql"
      DATABASE_OVERLOAD_RECOVERY: "true"
      DATABASE_COMPATIBILITY: "Virtuoso"
      # Note: not sure wether it gets picked up properly, it is meant for healing-process which may make
      # heavy queries
      QUERY_MAX_PROCESSING_TIME: 605000
      QUERY_MAX_EXECUTION_TIME: 605000
    volumes:
      - ./config/cl-authorization:/config
      - ./data/mu-auth:/data
    labels:
      - "logging=true"
    restart: always
